substitutions:
  device_name: eink-weather
  friendly_name: Eink Weather

esp32:
  board: esp32dev
  framework:
    type: arduino
   
packages:
  general_settings: !include general_settings.yaml

button:
  - platform: shutdown
    name: "Weather Display - Shutdown"
  - platform: restart
    name: "Weather Display - Restart"
  - platform: template
    name: "Weather Display - Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen

# Global variables for detecting if the display needs to be refreshed. (Thanks @paviro!)
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: no
    initial_value: '0'

# Script for updating screen - Refresh display and publish refresh count and time. (Thanks @paviro!)
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - logger.log: "Refreshing display..."
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(esptime).now().timestamp);'
      

esphome:
  name: ${device_name} 
  includes:
    - includes/calendar_utilities.h
    - includes/text_utilities.h
    - includes/time_utilities.h
    - includes/misc_utilities.h
  on_boot:
      priority: 200.0
      then:
        - component.update: eink_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
              # Wait a bit longer so all the items are received
        - delay: 5s
        - logger.log: "Initial sensor data received: Refreshing display..."
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen                                        

time:
  - platform: homeassistant
    id: esptime
    timezone: America/Chicago 
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - if:
              condition:
                lambda: 'return id(data_updated) == true;'
              then:
                - logger.log: "Sensor data updated and activity in home detected: Refreshing display..."
                - script.execute: update_screen
              else:
                - logger.log: "No sensors updated - skipping display refresh."

json:

sensor:
# Display refreshes sensor 
  - platform: template
    name: ${friendly_name} - Display refreshes
    id: display_refreshes
    accuracy_decimals: 0    
    unit_of_measurement: Refreshes
    state_class: total_increasing
    entity_category: diagnostic   
    lambda: |-
      return id(recorded_display_refresh);               

# Last data update  
  - platform: template
    name: ${friendly_name} - Last Update
    device_class: timestamp
    id: display_last_update

# Wifi signal strength
  - platform: wifi_signal
    name: "${friendly_name} - WiFi Signal Strength dBm"
    id: wifi_signal_db
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${friendly_name} - WiFi Signal Strength Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

# Weather (temperture, temperature low, rain)
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_temperature_now
    id: weather_temperature_now
    on_value: 
      lambda: |-
        id(data_updated) = true;
  
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_alert_number
    id: weather_alert_number
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_humid_now
    id: weather_humid_now
    on_value: 
      lambda: |-
        id(data_updated) = true;
  
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_wind_speed_now
    id: weather_wind_speed_now
    on_value: 
      lambda: |-
        id(data_updated) = true;   

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_temperature_0
    id: weather_temperature_0
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_templow_0
    id: weather_templow_0
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_apparent_temperature_now
    id: weather_apparent_temperature_now
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_rain_0
    id: weather_rain_0
    on_value: 
      lambda: |-
        id(data_updated) = true;                        
     
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_temperature_1
    id: weather_temperature_1
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_templow_1
    id: weather_templow_1
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_rain_1
    id: weather_rain_1
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_temperature_2
    id: weather_temperature_2
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_templow_2
    id: weather_templow_2
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_rain_2
    id: weather_rain_2
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_temperature_3
    id: weather_temperature_3
    on_value: 
      lambda: |-
        id(data_updated) = true;
 
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_templow_3
    id: weather_templow_3
    on_value: 
      lambda: |-
        id(data_updated) = true;
 
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_rain_3
    id: weather_rain_3
    on_value: 
      lambda: |-
        id(data_updated) = true;
 
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_temperature_4
    id: weather_temperature_4
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_templow_4
    id: weather_templow_4
    on_value: 
      lambda: |-
        id(data_updated) = true;
 
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_rain_4
    id: weather_rain_4
    on_value: 
      lambda: |-
        id(data_updated) = true;

# Calendar 
  - platform: homeassistant
    entity_id: sensor.esp_calendar_data
    attribute: closest_end_time
    id: closest_end_time
    
# Text sensors  
text_sensor:
# Wifi/Connection Info Sensors  
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Address
      icon: mdi:ip-network-outline 
    ssid:
      name: ${friendly_name} WiFi SSID 

#Weather (condition, day) 
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_alert_now
    id: weather_alert_now
    filters:
      - to_upper:
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_condition_now
    id: weather_condition_now
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_wind_direction_now
    id: weather_wind_direction_now
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_condition_0
    id: weather_condition_0
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_day_0
    id: weather_day_0
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_condition_1
    id: weather_condition_1
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_day_1
    id: weather_day_1
    on_value: 
      lambda: |-
        id(data_updated) = true;
 
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_condition_2
    id: weather_condition_2
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_day_2
    id: weather_day_2
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_condition_3
    id: weather_condition_3
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_day_3
    id: weather_day_3
    on_value: 
      lambda: |-
        id(data_updated) = true;
 
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_condition_4
    id: weather_condition_4
    on_value: 
      lambda: |-
        id(data_updated) = true;
 
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: weather_day_4
    id: weather_day_4
    on_value: 
      lambda: |-
        id(data_updated) = true;
 
 #Sunrise / Sunset
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: sun_next_rising
    id: sun_next_rising
    on_value: 
      lambda: |-
        id(data_updated) = true;
 
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: sun_next_setting
    id: sun_next_setting
    on_value: 
      lambda: |-
        id(data_updated) = true;

 #Moon phase
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: moon_phase
    id: moon_phase
    on_value: 
      lambda: |-
        id(data_updated) = true;

# Date + day
  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: day_full
    id: day_full
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: day
    id: day
    on_value: 
      lambda: |-
        id(data_updated) = true;

  - platform: homeassistant
    entity_id: sensor.e_paper_display_data
    attribute: datum
    id: datum
    on_value: 
      lambda: |-
        id(data_updated) = true;  

# Calendar
  - platform: homeassistant
    entity_id: sensor.esp_calendar_data
    attribute: entries
    id: calendar_json
    on_value: 
      lambda: |-
        id(data_updated) = true; 
    
  - platform: homeassistant
    entity_id: sensor.esp_calendar_data
    attribute: todays_day_name
    id: todays_day_name
    
  - platform: homeassistant
    entity_id: sensor.esp_calendar_data
    attribute: todays_date_month
    id: todays_date_month         

font:
  - file: 'fonts/Avenir Medium.ttf'
    id: font_dag
    size: 30
    glyphs: &default-glyphs
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','|', '/']      

  - file: 'fonts/Avenir Book.ttf'
    id: font_datum
    size: 30 
    glyphs: *default-glyphs    

  - file: 'fonts/Avenir Medium.ttf'
    id: font_headings
    size: 30 
    glyphs: *default-glyphs    

  - file: 'fonts/Avenir Medium.ttf'
    id: font_medium_45
    size: 30
    glyphs: *default-glyphs  

  - file: 'fonts/Avenir Medium.ttf'
    id: font_medium_20
    size: 18
    glyphs: *default-glyphs  

  - file: 'fonts/Avenir Book.ttf'
    id: font_normal_text
    size: 24
    glyphs: *default-glyphs    

  - file: 'fonts/Avenir Medium.ttf'
    id: font_medium
    size: 24
    glyphs: *default-glyphs      

  - file: 'fonts/Avenir Black.ttf'
    id: font_bold
    size: 24
    glyphs: *default-glyphs   

  - file: 'fonts/Avenir Medium.ttf'
    id: font_large_bold
    size: 108
    glyphs: ['-',' ', '°', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', 'a', 'n']

  - file: 'fonts/Avenir Medium.ttf'
    id: font_med_large_bold
    size: 90
    glyphs: ['-',' ', '°', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', 'a', 'n']

  - file: 'fonts/Avenir Medium.ttf'
    id: font_degree
    size: 54
    glyphs: ['°', 'C', 'F']

  - file: 'fonts/Avenir Medium.ttf'
    id: font_small
    size: 18
    glyphs: *default-glyphs

  - file: 'fonts/Avenir Book.ttf'
    id: font_footer
    size: 16
    glyphs: *default-glyphs

  - file: 'fonts/Avenir Medium.ttf'
    id: font_footer_normal
    size: 16
    glyphs: *default-glyphs

  - file: 'fonts/Avenir Heavy.ttf'
    id: font_small_bold
    size: 18
    glyphs: *default-glyphs

  - file: 'fonts/Avenir Heavy.ttf'
    id: font_bold_20
    size: 20
    glyphs: *default-glyphs

  - file: 'fonts/Avenir Black.ttf'
    id: font_small_black
    size: 18    
    glyphs: *default-glyphs    

  # Include Material Design Icons font
  # Thanks to https://community.home-assistant.io/t/display-materialdesign-icons-on-esphome-attached-to-screen/199790/16
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_large
    # size: 96
    size: 124
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
      - "\U000F0A7A" # mdi-trash-can-outline
      - "\U000F0E17" # mdi-calendar
      - "\U000F0083" # mdi-battery-alert
      - "\U000F0E8E" # calendar-sync

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_medium
    size: 48
    glyphs: *mdi-weather-glyphs

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_medium_small
    size: 36
    glyphs: 
      - "\U000F0E17" # mdi-calendar
      - "\U000F00F6" # mdi-calendar-today
      - "\U000F0110" # mdi-cart
      - "\U000F14DF" # mdi-rocket-launch-outline

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_small
    size: 30
    glyphs:
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F059D" # mdi-weather-windy
      - "\U000F10C3" # mdi-thermometer-low
      - "\U000F10C2" # mdi-thermometer-high
      - "\U000F0E05" # mdi-thermometer-plus
      - "\U000F0E04" # mdi-thermometer-minus
      - "\U000F0E03" # mdi-thermometer-chevron-up
      - "\U000F0E02" # mdi-thermometer-chevron-down    
      - "\U000F050F" # mdi-thermometer
      - "\U000F0E0A" # mdi-water-outline
      - "\U000F058E" # mdi-water-percent
      - "\U000F1B0F" # mdi-temp_auto

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_footer
    size: 18
    glyphs:
      - "\U000F0079" # mdi-battery
      - "\U000F007A" # mdi-battery-10
      - "\U000F007B" # mdi-battery-20
      - "\U000F007C" # mdi-battery-30
      - "\U000F007D" # mdi-battery-40
      - "\U000F007E" # mdi-battery-50
      - "\U000F007F" # mdi-battery-60
      - "\U000F0080" # mdi-battery-70
      - "\U000F0081" # mdi-battery-80
      - "\U000F0082" # mdi-battery-90
      - "\U000F06B0" # mdi-update
      - "\U000F0450" # mdi-refresh
   
  - file: 'fonts/moon_phases.ttf'
    id: font_moon
    size: 30
    glyphs: ['0', '@', 'G', 'T', 'W', 'Q', 'D', 'J']

# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

# Now render everything on the ePaper screen.    
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: 
      number: GPIO25
      inverted: true 
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50inV2p
    update_interval: never
    full_update_every: 30
    rotation: 0°
    lambda: |-
      std::map<std::string, std::string> moon_icon_map
        {
          {"first_quarter", "G"},
          {"full_moon", "@"},
          {"last_quarter", "T"},
          {"new_moon", "0"},
          {"waning_crescent", "W"},
          {"waning_gibbous", "Q"},
          {"waxing_crescent", "D"},
          {"waxing_gibbous", "J"},
          
        };

      std::map<std::string, std::string> moon_description
        {
          {"first_quarter", "First Quarter"},
          {"full_moon", "Full Moon"},
          {"last_quarter", "Last Quarter"},
          {"new_moon", "New Moon"},
          {"waning_crescent", "Waning Crescent"},
          {"waning_gibbous", "Waning Gibbous"},
          {"waxing_crescent", "Waxing Crescent"},
          {"waxing_gibbous", "Waxing Gibbous"},
          
        };

      // Map weather states to MDI characters.
      std::map<std::string, std::string> weather_icon_map
        {
          {"cloudy", "\U000F0590"},
          {"cloudy-alert", "\U000F0F2F"},
          {"cloudy-arrow-right", "\U000F0E6E"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"hazy", "\U000F0F30"},
          {"hurricane", "\U000F0898"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"night", "\U000F0594"},
          {"clear-night", "\U000F0594"},
          {"night-partly-cloudy", "\U000F0F31"},
          {"partlycloudy", "\U000F0595"},
          {"partly-lightning", "\U000F0F32"},
          {"partly-rainy", "\U000F0F33"},
          {"partly-snowy", "\U000F0F34"},
          {"partly-snowy-rainy", "\U000F0F35"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-heavy", "\U000F0F36"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunny-alert", "\U000F0F37"},
          {"sunny-off", "\U000F14E4"},
          {"sunset", "\U000F059A"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"tornado", "\U000F0F38"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"},
        };

      int xres = it.get_width();
      int yres = it.get_height();   

      // Fill background in black.
      it.fill(COLOR_OFF);

      // Show loading screen before data is received.
      if (id(initial_data_received) == false) {
        it.printf(240, 390, id(font_small_bold), TextAlign::TOP_CENTER, "WAITING FOR DATA... xres %d, yres %d", xres, yres);
      } else {

      // Weather Section
      int wy_offset = 10; //weather y offset
      int column2_x_offset = 120;
      int column3_x_offset = 180;
      int alert_offset_weather = 0;
      int alert_offset_forecast = 0;

      // If there is an active weather alert, display it
      if (id(weather_alert_number).state != 0) {
        // Display the weather alert as white text on a black rectangle
        int alert_height = get_text_height( & it, id(font_bold_20), "%s", id(weather_alert_now).state.c_str());
        // draw a black rectangle for the alert
        it.filled_rectangle(10, wy_offset, 387, alert_height + 10, COLOR_ON);
        // print the alert text in white
        it.printf(207, wy_offset+(alert_height-5), id(font_bold_20), COLOR_OFF, TextAlign::CENTER, "%s", id(weather_alert_now).state.c_str());
        // adjust the subsequent sections spacing because of the alert
        alert_offset_weather = alert_height+7;  
        alert_offset_forecast = 15;
        wy_offset += alert_height + 20;
      }

      //  WEATHER STATE ICON
      it.printf(80, wy_offset, id(font_mdi_large), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_now).state.c_str()].c_str());
      // TEMPERATURE
      it.printf(330, wy_offset+15, id(font_large_bold), TextAlign::TOP_RIGHT, "%.0f", id(weather_temperature_now).state);
      it.print(330, wy_offset+15, id(font_degree), TextAlign::TOP_LEFT, "°F");   

      int w_x_offset = 10;  
      int w_y_offset = 170+alert_offset_weather;   

      //  Print rain
      it.printf(w_x_offset, w_y_offset, id(font_mdi_small), TextAlign::CENTER_LEFT, "\U000F0E0A");
      it.printf(w_x_offset+35, w_y_offset, id(font_small_bold), TextAlign::CENTER_LEFT, "%.0f%%", id(weather_rain_0).state);  

      w_x_offset += column2_x_offset; 

      //  Print temp low | high
      it.printf(w_x_offset, w_y_offset, id(font_mdi_small), TextAlign::CENTER_LEFT, "\U000F050F");
      it.printf(w_x_offset+35, w_y_offset, id(font_small_bold), TextAlign::CENTER_LEFT, "%.0f°F | %.0f°F", id(weather_templow_0).state, id(weather_temperature_0).state);

      w_x_offset += column3_x_offset; 

      //  Print apparent temperature
      it.printf(w_x_offset, w_y_offset, id(font_mdi_small), TextAlign::CENTER_LEFT, "\U000F1B0F");
      it.printf(w_x_offset+35, w_y_offset, id(font_small_bold), TextAlign::CENTER_LEFT, "%.0f%°F",id(weather_apparent_temperature_now).state);

      w_x_offset = 10; 
      w_y_offset += 45;      

      //  Print sunrise
      it.printf(w_x_offset, w_y_offset, id(font_mdi_small),  TextAlign::CENTER_LEFT, "\U000F059C");
      it.printf(w_x_offset+35, w_y_offset, id(font_small_bold), TextAlign::CENTER_LEFT, "%s", id(sun_next_rising).state.c_str());

      w_x_offset += column2_x_offset; 

      //  Print windspeed
      it.printf(w_x_offset, w_y_offset, id(font_mdi_small), TextAlign::CENTER_LEFT, "\U000F059D");
      it.printf(w_x_offset+35, w_y_offset, id(font_small_bold), TextAlign::CENTER_LEFT, "%.1f Mph (%s)", id(weather_wind_speed_now).state, id(weather_wind_direction_now).state.c_str());

      w_x_offset += column3_x_offset; 

      //  Print humidity
      it.printf(w_x_offset, w_y_offset, id(font_mdi_small), TextAlign::CENTER_LEFT, "\U000F058E");
      it.printf(w_x_offset+35, w_y_offset, id(font_small_bold), TextAlign::CENTER_LEFT, "%.0f%%",id(weather_humid_now).state);   

      w_x_offset = 10; 
      w_y_offset += 45; 

      //  Print sunset
      it.printf(w_x_offset, w_y_offset, id(font_mdi_small), TextAlign::CENTER_LEFT, "\U000F059B");
      it.printf(w_x_offset+35, w_y_offset, id(font_small_bold), TextAlign::CENTER_LEFT, "%s", id(sun_next_setting).state.c_str());
      w_x_offset += column2_x_offset; 

      //  Print moon
      it.printf(w_x_offset, w_y_offset, id(font_moon), TextAlign::CENTER_LEFT, "%s", moon_icon_map[id(moon_phase).state.c_str()].c_str());
      it.printf(w_x_offset+35, w_y_offset, id(font_small_bold), TextAlign::CENTER_LEFT, "%s", moon_description[id(moon_phase).state.c_str()].c_str());             
    
      // Weather forecast section
      int forecast_yoffset = 310+alert_offset_forecast;
      int fcst_xstart = 45;
      int fcst_offset = 80;

      it.printf(fcst_xstart, forecast_yoffset,    id(font_small_black), TextAlign::TOP_CENTER, "%s", id(weather_day_0).state.c_str());
      it.printf(fcst_xstart, forecast_yoffset+20, id(font_mdi_medium), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_0).state.c_str()].c_str());
      it.printf(fcst_xstart, forecast_yoffset+72, id(font_small_bold), TextAlign::TOP_CENTER, "%.0f°F", id(weather_temperature_0).state);
      it.printf(fcst_xstart, forecast_yoffset+100, id(font_small), TextAlign::TOP_CENTER, "%.0f°F", id(weather_templow_0).state);
      it.printf(fcst_xstart, forecast_yoffset+128, id(font_small), TextAlign::TOP_CENTER, "%.0f%%", id(weather_rain_0).state);

      fcst_xstart += fcst_offset;
      it.printf(fcst_xstart, forecast_yoffset,    id(font_small_black), TextAlign::TOP_CENTER, "%s", id(weather_day_1).state.c_str());
      it.printf(fcst_xstart, forecast_yoffset+20, id(font_mdi_medium), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_1).state.c_str()].c_str());
      it.printf(fcst_xstart, forecast_yoffset+72, id(font_small_bold), TextAlign::TOP_CENTER, "%.0f°F", id(weather_temperature_1).state);
      it.printf(fcst_xstart, forecast_yoffset+100, id(font_small), TextAlign::TOP_CENTER, "%.0f°F", id(weather_templow_1).state);
      it.printf(fcst_xstart, forecast_yoffset+128, id(font_small), TextAlign::TOP_CENTER, "%.0f%%", id(weather_rain_1).state);

      fcst_xstart += fcst_offset;
      it.printf(fcst_xstart, forecast_yoffset,    id(font_small_black), TextAlign::TOP_CENTER, "%s", id(weather_day_2).state.c_str());
      it.printf(fcst_xstart, forecast_yoffset+20, id(font_mdi_medium), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_2).state.c_str()].c_str());
      it.printf(fcst_xstart, forecast_yoffset+72, id(font_small_bold), TextAlign::TOP_CENTER, "%.0f°F", id(weather_temperature_2).state);
      it.printf(fcst_xstart, forecast_yoffset+100, id(font_small), TextAlign::TOP_CENTER, "%.0f°F", id(weather_templow_2).state);
      it.printf(fcst_xstart, forecast_yoffset+128, id(font_small), TextAlign::TOP_CENTER, "%.0f%%", id(weather_rain_2).state);

      fcst_xstart += fcst_offset;
      it.printf(fcst_xstart, forecast_yoffset,    id(font_small_black), TextAlign::TOP_CENTER, "%s", id(weather_day_3).state.c_str());
      it.printf(fcst_xstart, forecast_yoffset+20, id(font_mdi_medium), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_3).state.c_str()].c_str());
      it.printf(fcst_xstart, forecast_yoffset+72, id(font_small_bold), TextAlign::TOP_CENTER, "%.0f°F", id(weather_temperature_3).state);
      it.printf(fcst_xstart, forecast_yoffset+100, id(font_small), TextAlign::TOP_CENTER, "%.0f°F", id(weather_templow_3).state);
      it.printf(fcst_xstart, forecast_yoffset+128, id(font_small), TextAlign::TOP_CENTER, "%.0f%%", id(weather_rain_3).state);

      fcst_xstart += fcst_offset;
      it.printf(fcst_xstart, forecast_yoffset,    id(font_small_black), TextAlign::TOP_CENTER, "%s", id(weather_day_4).state.c_str());
      it.printf(fcst_xstart, forecast_yoffset+20, id(font_mdi_medium), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_4).state.c_str()].c_str());
      it.printf(fcst_xstart, forecast_yoffset+72, id(font_small_bold), TextAlign::TOP_CENTER, "%.0f°F", id(weather_temperature_4).state);
      it.printf(fcst_xstart, forecast_yoffset+100, id(font_small), TextAlign::TOP_CENTER, "%.0f°F", id(weather_templow_4).state);
      it.printf(fcst_xstart, forecast_yoffset+128, id(font_small), TextAlign::TOP_CENTER, "%.0f%%", id(weather_rain_4).state);        

      // Draw vertical line between weather and calendar
      it.line(415, 10, 415, 470);  

      // Calendar section
      auto time = id(esptime).now();
      int cal_xstart = 440;
      int cal_ystart = 25;

      // Calculate today date width
      int day_of_month_width = get_text_width( & it, id(font_med_large_bold), "%d", time.day_of_month);
      int todays_day_name_width = get_text_width( & it, id(font_small), "%s", id(todays_day_name).state.c_str());
      int month_width = get_text_width( & it, id(font_small), "%s", id(todays_date_month).state.c_str());
      
      int todays_date_widths[3] = {day_of_month_width, todays_day_name_width, month_width};
      int max_todays_date_width = find_max_in_array(todays_date_widths, 3);
      int day_name_height = get_text_height( & it, id(font_small), "%s", id(todays_day_name).state.c_str());
      int day_height = get_text_height( & it, id(font_med_large_bold), "%d", time.day_of_month);
      int day_name_offset = cal_ystart+day_height-20;
      int year_offset = day_name_offset+day_name_height+2;

      it.printf(cal_xstart + max_todays_date_width / 2, cal_ystart, id(font_med_large_bold), TextAlign::TOP_CENTER, "%d", time.day_of_month);
      it.printf(cal_xstart + max_todays_date_width / 2, day_name_offset, id(font_small), TextAlign::TOP_CENTER, "%s", id(todays_day_name).state.c_str());
      it.printf(cal_xstart + max_todays_date_width / 2, year_offset, id(font_small), TextAlign::TOP_CENTER, "%s", id(todays_date_month).state.c_str());
    
      // Draw Calendar

      int calendar_x_pos = cal_xstart + max_todays_date_width +40;
      int calendar_y_pos = cal_ystart+15; 
      int days_padding_bottom = 5;
      int circle_size = 11;
      int cell_size_width = 35;
      int cell_size_height = 24;
                
      if (time.day_of_month >= 10) {
        cell_size_width = 33;
        calendar_x_pos -= 10;
      }

      auto color_background = Color::BLACK; 
      char cal[7][7][3]; // Calendar matrix including weekdays
      int days_line_left_position = 0;
      int days_line_right_position = 0;
  
      get_calendar_matrix(time.year, time.month, cal);
    
        for (int i = 0; i < 7; i++) {
          for (int j = 0; j < 7; j++) {
            int x_pos = calendar_x_pos + cell_size_width * j;
            int y_pos = calendar_y_pos + cell_size_height * i;
    
            if (i == 0) {
              // Header (day names)
              it.printf(x_pos, y_pos, id(font_small_bold), TextAlign::CENTER, "%s", cal[i][j]);
              if (j == 0) {
                days_line_left_position = x_pos - (get_text_width( & it, id(font_footer_normal), "%s", cal[i][j]) / 2);
              } else if (j == 6) {
                days_line_right_position = x_pos + (get_text_width( & it, id(font_footer_normal), "%s", cal[i][j]) / 2);
              }
            } else {
              // Day numbers
              y_pos += days_padding_bottom;
              if (atoi(cal[i][j]) == time.day_of_month) {
                // Highlight current day
                it.filled_circle(x_pos, y_pos - 3, circle_size);
                it.printf(x_pos, y_pos, id(font_footer_normal), color_background, TextAlign::CENTER, "%s", cal[i][j]);
              } else {
                it.printf(x_pos, y_pos, id(font_footer_normal), TextAlign::CENTER, "%s", cal[i][j]);
              }
            }
          }
          if (i == 1) {
            it.line(days_line_left_position, calendar_y_pos + (cell_size_height / 2), days_line_right_position, calendar_y_pos + (cell_size_height / 2));
          }
        }
    
        // End Draw Calendar

        // Draw event list
    
        DynamicJsonDocument doc(4096);
        deserializeJson(doc, id(calendar_json).state.c_str());
        JsonArray entries = doc.as<JsonArray>();
    
        int current_y_position = cal_ystart+170; // Initial vertical position
        int start_x_position = cal_xstart; // Initial horizontal position
        int date_event_line_padding = 10; // Padding between date and event line
        const int max_y_position = 480; // Maximum vertical position
        const int events_top_padding = 5; // Padding top first event within a day
        const int event_spacing = 10; // Spacing between the events within a day
        const int events_bottom_padding = 5; // Padding after the last entry of the day
        const int day_spacing = 15; // Spacing between different days
    
        int max_event_title_length = 30; // Max characters event title 
        int max_event_subtitle_length = 44; // Max characters event subtitle 

        int max_event_date_width = 0;
        // Loop over every event to find the max width of the date field so we can center the events
        // and align the event separator line
        for (JsonVariant entry: entries) {
          int day_number = entry["day"].as < int > ();
          const char * day_name = entry["day_name"];
    
          // Calculate day title height/width
          int day_number_width = get_text_width( & it, id(font_medium_45), "%d", day_number);
          int day_name_width = get_text_width( & it, id(font_medium_20), "%s", day_name);

          // Find max width of the day title
          int day_widths[2] = {day_number_width, day_name_width};
          int max_day_width = find_max_in_array(day_widths, 2);
          if(max_day_width > max_event_date_width) {
            max_event_date_width = max_day_width;
          }
        };

        // Calculate offsets for events and spacer elements
        int event_start_x_position = start_x_position + max_event_date_width + date_event_line_padding*2; // Adjusted x position for events
        int event_seperator_x_position = start_x_position + max_event_date_width + date_event_line_padding; // Adjusted x position for event separator line

        for (JsonVariant entry: entries) {
          int day_number = entry["day"].as < int > ();
          const char * day_name = entry["day_name"];
    
          // Calculate day title height/width
          int day_number_height = get_text_height( & it, id(font_medium_45), "%d", day_number);
          int day_name_height = get_text_height( & it, id(font_medium_20), "%s", day_name);
          int day_title_height = day_number_height + day_name_height; // Total space needed for the day title

          // Check if there's enough space for the day's title before drawing
          if (current_y_position + day_title_height > max_y_position) break;
    
          // Draw day title
          it.printf(start_x_position+max_event_date_width/2, current_y_position, id(font_medium_45), TextAlign::TOP_CENTER, "%d", day_number);
          it.printf(start_x_position+max_event_date_width/2, current_y_position + day_number_height - 5, id(font_medium_20), TextAlign::TOP_CENTER, "%s", day_name);

          int entry_y_position = current_y_position + events_top_padding; // Initialize entry_y_position to align with the day number + optional padding
    
          auto processEntry = [ & ](const JsonVariant & item) -> bool {
            std::string summary = item["summary"].as < std::string > ();
            const char * start = item["start"];
            const char * end = item["end"];
            const char * location_name = item["location_name"];
            const char * calendar_name = item["calendar_name"];

            // Create copy we can modify
            int max_event_title_chars = max_event_title_length; 
            int max_event_subtitle_chars = max_event_subtitle_length; 
    
            std::string start_time = start ? extract_time(start) : "";
            std::string end_time = end ? extract_time(end) : "";
    
            // start_time == empty => day event (check if multiple days to add that information)
            if (start_time.empty()) {
    
              // Get current date in format yyyy-mm-dd
              auto get_current_date_str = []() -> std::string {
                auto time = id(esptime).now();
                char buffer[11];
                sprintf(buffer, "%d-%02d-%02d", time.year, time.month, time.day_of_month);
    
                return std::string(buffer);
              };
    
              // Calculate length of event in days
              int days = days_between_dates(start, end);
    
              // If event is longer than just today
              if (days > 1) {
                if (start == get_current_date_str()) {
                  // Event is today
                  // Subtract today from the length in days
                  days -= 1;
                  end_time = "left";
                } else {
                  end_time = "long";
                }
    
                start_time = std::to_string(days) + ((days > 1) ? " days" : " day");
    
              } else {
                // Event won't have time information so the title and subtitle can be longer
                max_event_title_chars += 4;
                max_event_subtitle_chars += 6;
              }
            }
    
            std::string subtitle_string = std::string(calendar_name) + (location_name && strlen(location_name) > 0 ? " · " + std::string(location_name) : "");
            if (subtitle_string.length() > max_event_subtitle_chars) {
              subtitle_string = subtitle_string.substr(0, max_event_subtitle_chars - 3) + "...";
            }
    
            if (summary.length() > max_event_title_chars) {
              summary = summary.substr(0, max_event_title_chars - 3) + "...";
            }
    
            int summary_height = get_text_height( & it, id(font_bold_20), "%s", summary.c_str());
            int time_height = get_text_height( & it, id(font_small), "%s", start_time.c_str());
   
            // Check if event will still fit
            if (entry_y_position + summary_height + time_height + event_spacing <= max_y_position) {
              // Draw event summary
              it.printf(event_start_x_position, entry_y_position, id(font_bold_20), TextAlign::TOP_LEFT, "%s", summary.c_str());
    
              entry_y_position += summary_height + 2;
    
              // Draw subtitle string (calendar name and location)
              //it.printf(start_x_position+55, entry_y_position, id(font_small), TextAlign::TOP_LEFT, "%s", subtitle_string.c_str());
  
              // Draw start time
              if (!start_time.empty()) {
                it.printf(event_start_x_position, entry_y_position, id(font_small), TextAlign::TOP_LEFT, "%s - %s", start_time.c_str(), end_time.c_str());
              }
    
              entry_y_position += time_height + event_spacing;
    
              // Event drawn - return true
              return true;
            } else {
              // Event did not fit and was not drawn - return false
              return false;
            }
          };
    
          JsonArray all_day = entry["all_day"];
          JsonArray other = entry["other"];
    
          for (JsonVariant item: all_day) {
            if (!processEntry(item)) break;
          }
    
          for (JsonVariant item: other) {
            if (!processEntry(item)) break;
          }
    
          entry_y_position += events_bottom_padding - event_spacing;
    
          // Draw the vertical line next to the day titles and events
          it.line(event_seperator_x_position, current_y_position, event_seperator_x_position, entry_y_position);
    
          // Update current_y_position for the next day, ensuring space between days
          current_y_position = entry_y_position + day_spacing;
        }
    
        // End Draw event list
      }

